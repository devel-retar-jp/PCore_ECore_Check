/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// isPrime.cpp : アプリケーションのエントリ ポイントを定義します。
//
// シングルスレッド処理・Windows Thread
// Windows専用
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "isPrime.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool isPrime(uint_fast64_t n)
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (n <= 1)
	{
		return false;
	}
	for (uint_fast64_t i = 2; i * i <= n; i++) {
		if (n % i == 0) 
		{
			return false;
		}
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	return true;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 開始時間を記録
	auto durationStart = std::chrono::high_resolution_clock::now();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint_fast64_t lower = 1;
	//uint_fast64_t upper = 10000001;     //Debug  Single Core
	uint_fast64_t upper = 10001;
	//                    18446744073709551615 : MAX
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::cout << "------------------------------------------------------------------------------------------------\r\n" << std::flush;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//results
	std::vector<uint_fast64_t> numResults;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Percent
	uint_fast64_t per10div = (upper - lower) / 10;
	std::vector<uint_fast64_t> Div10Vect;
	uint_fast64_t divs10 = lower;
	while (divs10 < upper)
	{
		Div10Vect.push_back(divs10);
		divs10 = divs10 + per10div;
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::cout << "Prime Number : ";
	int pnumCount = 1;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	for (uint_fast64_t i = lower; i <= upper; i++)
	{
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if (isPrime(i)) 
		{
			/////////////////////////////////////////////////////////////////////////////////////////////////////////
			//Result Push Back
			numResults.push_back(i);
			/////////////////////////////////////////////////////////////////////////////////////////////////////////
			//Percent
			if (pnumCount < Div10Vect.size())
			{
				if (Div10Vect[pnumCount] < i)
				{
					std::cout << pnumCount * 10 << "%  ";
					pnumCount++;
				}
			}
			/////////////////////////////////////////////////////////////////////////////////////////////////////////
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::cout << std::endl;
	std::cout << "------------------------------------------------------------------------------------------------\r\n" << std::flush;
	std::cout << "Size Result : " << numResults.size();
	std::cout << std::endl;
	std::cout << "------------------------------------------------------------------------------------------------\r\n" << std::flush;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 終了時間を記録
	auto durationEnd = std::chrono::high_resolution_clock::now();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 時間差を計算してミリ秒単位で表示
	auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(durationEnd - durationStart);
	std::cout << "EXECUTE : " << duration.count() << " milSEC  :  " << duration.count() / 1000 << " SEC" << std::endl;
	std::cout << "------------------------------------------------------------------------------------------------\r\n" << std::flush;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	return 0;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
